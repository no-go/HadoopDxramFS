<?xml version="1.0" encoding="UTF-8"?>

<project name="dxram" basedir="." default="release">
    <import file="dxram-build-config.xml"/>

    <!-- Load the ant contrib lib -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/lib/ant-contrib-0.6.jar"/>
        </classpath>
    </taskdef>

    <!-- Build root debug -->
    <target name="debug" description="builds dxram-debug.jar (contains all logger calls)">
        <antcall target="update-git-rev-in-code"/>
        <antcall target="update-build-type">
            <param name="buildtype" value="debug"/>
        </antcall>

        <antcall target="compile">
            <param name="buildtype" value="debug"/>
        </antcall>

        <move file="${build_proj_dir}/${name_dxram}-debug.jar" tofile="${build_proj_dir}/${name_dxram}.jar"/>
        <copy file="${build_proj_dir}/${name_dxram}.jar" tofile="${basedir}/${name_dxram}.jar"/>
    </target>

    <!-- Build root release -->
    <target name="release" description="builds dxram-release-jar">
        <exec dir="util/" executable="/bin/bash">
            <arg line="preprocessor.sh INFO ENABLED DISABLED"/>
        </exec>

        <antcall target="update-git-rev-in-code"/>
        <antcall target="update-build-type">
            <param name="buildtype" value="release"/>
        </antcall>

        <trycatch>
            <try>
                <antcall target="compile">
                    <param name="buildtype" value="release"/>
                </antcall>
            </try>
            <catch>
                <fail message="Compiler error(s)!"/>
            </catch>
            <finally>
                <exec dir="util/" executable="/bin/bash">
                    <arg line="postprocessor.sh"/>
                </exec>
            </finally>
        </trycatch>

        <move file="${build_proj_dir}/${name_dxram}-release.jar" tofile="${build_proj_dir}/${name_dxram}.jar"/>
        <copy file="${build_proj_dir}/${name_dxram}.jar" tofile="${basedir}/${name_dxram}.jar"/>
    </target>

    <!-- Build root performance -->
    <target name="performance" description="builds dxram-performance.jar (without any statistics)">
        <exec dir="util/" executable="/bin/bash">
            <arg line="preprocessor.sh INFO DISABLED DISABLED"/>
        </exec>

        <antcall target="update-git-rev-in-code"/>
        <antcall target="update-build-type">
            <param name="buildtype" value="performance"/>
        </antcall>

        <trycatch>
            <try>
                <antcall target="compile">
                    <param name="buildtype" value="performance"/>
                </antcall>
            </try>
            <catch>
                <fail message="Compiler error(s)!"/>
            </catch>
            <finally>
                <exec dir="util/" executable="/bin/bash">
                    <arg line="postprocessor.sh"/>
                </exec>
            </finally>
        </trycatch>

        <move file="${build_proj_dir}/${name_dxram}-performance.jar" tofile="${build_proj_dir}/${name_dxram}.jar"/>
        <copy file="${build_proj_dir}/${name_dxram}.jar" tofile="${basedir}/${name_dxram}.jar"/>
    </target>

    <!-- Compile class files -->
    <target name="compile" description="builds class files">
        <echo message="Compiling with build type ${buildtype}"/>

        <!-- Find tools.jar which is included in the JDK. Required for dxmonitor -->
        <if>
            <equals arg1="${java.home}" arg2=""/>
            <then>
                <!-- java_home not set -->
                <exec command="uname" resultproperty="unameResult"/>
                <exec command="expr substr $(uname -s) 1 5" resultproperty="unameResult2"/>

                <if>
                    <equals arg1="${unameResult}" arg2="Darwin" />
                    <then> <!-- OSX -->
                        <exec command="/usr/libexec/java_home" resultproperty="tmpJH"/>
                        <property name="tools.path" value="${tmpJH}/lib/"/>
                    </then>
                    <elseif>
                        <equals arg1="${unameResult2}" arg2="Linux" />
                        <then> <!-- LINUX -->
                            <exec command="dirname $(dirname $readlink -f $(type -p javac)))" resultproperty="tmpJH"/>
                            <property name="tools.path" value="${tmpJH}/lib/"/>
                        </then>
                    </elseif>
                </if>
            </then>
            <else>
                <!-- java.home is set -->
                <if>
                    <contains string="${java.home}" substring="jre"/>
                    <then>
                        <property name="tools.path" value="${java.home}/../lib"/>
                    </then>
                    <else>
                        <property name="tools.path" value="${java.home}/lib"/>
                    </else>
                </if>
            </else>
        </if>

        <mkdir dir="${build_proj_dir}/classes"/>
        <mkdir dir="${build_proj_dir}/classes/${buildtype}"/>

        <condition property="debugOn" value="true" else="false">
			<or>
            	<equals arg1="${buildtype}" arg2="debug"/>
				<equals arg1="${buildtype}" arg2="release"/>
			</or>     
        </condition>
        <condition property="optimizeOn" value="on" else="off">
			<or>
            	<equals arg1="${buildtype}" arg2="release"/>
				<equals arg1="${buildtype}" arg2="performance"/>
			</or>        
		</condition>

        <javac srcdir="${source_dir}" destdir="${build_proj_dir}/classes/${buildtype}" includeantruntime="false"
               debug="${debugOn}" optimize="${optimizeOn}"
               target="1.8" encoding="UTF-8">
            <compilerarg line="-Xlint:sunapi -XDenableSunApiLintControl"/>
            <include name="de/hhu/bsinfo/dxgraph/**/*.java"/>
            <include name="de/hhu/bsinfo/dxram/**/*.java"/>
            <include name="de/hhu/bsinfo/dxmonitor/**/*.java"/>
            <include name="de/hhu/bsinfo/dxnet/**/*.java"/>
            <include name="de/hhu/bsinfo/dxutils/**/*.java"/>
            <include name="de/hhu/bsinfo/soh/**/*.java"/>
            <classpath>
                <fileset dir="${lib_dir}">
                    <include name="**/*.jar"/>
                </fileset>
                <file name="${tools.path}/tools.jar"/>
            </classpath>
        </javac>

        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>

        <jar destfile="${build_proj_dir}/${name_dxram}-${buildtype}.jar" basedir="${build_proj_dir}/classes/${buildtype}">
            <manifest>
                <attribute name="BuildUser" value="${user.name}"/>
                <attribute name="BuildDate" value="${TODAY}"/>
                <attribute name="Main-Class" value="de.hhu.bsinfo.dxram.DXRAMMain"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </jar>

        <delete dir="${build_proj_dir}/classes"/>
    </target>

    <available file=".git" type="dir" property="git.present"/>

    <target name="update-git-rev-in-code" depends="replace-git-tokens"/>

    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
        <echo level="info" message="git.present is set ${git.present}"/>
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="log"/>
            <arg value="-1"/>
            <arg value="--format=%h"/>
            <arg value="--date=short"/>
            <arg value="HEAD"/>
        </exec>
        <echo level="info" message="git.revision is set ${git.revision}"/>
        <condition property="repository.version" value="${git.revision}" else="unknown">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
        <echo level="info" message="repository.version is set ${repository.version}"/>
    </target>

    <target name="replace-git-tokens" depends="git.revision">
        <replaceregexp match="&quot;.*&quot;;.*//@GITCOMMIT@" replace="&quot;${repository.version}&quot;; //@GITCOMMIT@">
            <fileset dir="${source_dir}"/>
        </replaceregexp>
    </target>

   <target name="update-build-type">
        <replaceregexp match="&quot;.*&quot;;.*//@BUILDTYPE@" replace="&quot;${buildtype}&quot;; //@BUILDTYPE@">
            <fileset dir="${source_dir}"/>
        </replaceregexp>
    </target>
</project>
